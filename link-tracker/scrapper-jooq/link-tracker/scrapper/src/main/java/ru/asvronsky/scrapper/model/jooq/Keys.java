/*
 * This file is generated by jOOQ.
 */
package ru.asvronsky.scrapper.model.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.asvronsky.scrapper.model.jooq.tables.Chat;
import ru.asvronsky.scrapper.model.jooq.tables.Databasechangeloglock;
import ru.asvronsky.scrapper.model.jooq.tables.Link;
import ru.asvronsky.scrapper.model.jooq.tables.Subscription;
import ru.asvronsky.scrapper.model.jooq.tables.records.ChatRecord;
import ru.asvronsky.scrapper.model.jooq.tables.records.DatabasechangeloglockRecord;
import ru.asvronsky.scrapper.model.jooq.tables.records.LinkRecord;
import ru.asvronsky.scrapper.model.jooq.tables.records.SubscriptionRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChatRecord> CHAT_PKEY = Internal.createUniqueKey(Chat.CHAT, DSL.name("chat_pkey"), new TableField[] { Chat.CHAT.CHAT_ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<LinkRecord> LINK_PKEY = Internal.createUniqueKey(Link.LINK, DSL.name("link_pkey"), new TableField[] { Link.LINK.ID }, true);
    public static final UniqueKey<LinkRecord> LINK_URL_KEY = Internal.createUniqueKey(Link.LINK, DSL.name("link_url_key"), new TableField[] { Link.LINK.URL }, true);
    public static final UniqueKey<SubscriptionRecord> SUBSCRIPTION_PKEY = Internal.createUniqueKey(Subscription.SUBSCRIPTION, DSL.name("subscription_pkey"), new TableField[] { Subscription.SUBSCRIPTION.LINK_ID, Subscription.SUBSCRIPTION.CHAT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<SubscriptionRecord, ChatRecord> SUBSCRIPTION__SUBSCRIPTION_CHAT_ID_FKEY = Internal.createForeignKey(Subscription.SUBSCRIPTION, DSL.name("subscription_chat_id_fkey"), new TableField[] { Subscription.SUBSCRIPTION.CHAT_ID }, Keys.CHAT_PKEY, new TableField[] { Chat.CHAT.CHAT_ID }, true);
    public static final ForeignKey<SubscriptionRecord, LinkRecord> SUBSCRIPTION__SUBSCRIPTION_LINK_ID_FKEY = Internal.createForeignKey(Subscription.SUBSCRIPTION, DSL.name("subscription_link_id_fkey"), new TableField[] { Subscription.SUBSCRIPTION.LINK_ID }, Keys.LINK_PKEY, new TableField[] { Link.LINK.ID }, true);
}
